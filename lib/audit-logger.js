// ===================================================================
// üìù PERSONEL TAKƒ∞P & AUDIT LOGGING Sƒ∞STEMƒ∞
// Her i≈ülemi kim yaptƒ±, ne zaman yaptƒ±, ne deƒüi≈ütirdi?
// ===================================================================

import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

/**
 * üîç AUDIT LOG OLU≈ûTURMA
 * Her CRUD operasyonu i√ßin otomatik log kaydƒ±
 * 
 * @param {string} personelId - ƒ∞≈ülemi yapan personelin ID'si (P001, P002, vb.)
 * @param {string} action - Ne yapƒ±ldƒ±? (CREATE, UPDATE, DELETE, APPROVE, vb.)
 * @param {string} tableName - Hangi tablo? ("Siparis", "Urun", "Material", vb.)
 * @param {string|number} recordId - Hangi kayƒ±t?
 * @param {object} oldValues - Eski deƒüerler (UPDATE i√ßin)
 * @param {object} newValues - Yeni deƒüerler (CREATE/UPDATE i√ßin)
 * @param {string} description - A√ßƒ±klama ("Sipari≈ü onaylandƒ±", "Fiyat g√ºncellendi", vb.)
 * @param {object} req - HTTP request object (IP, userAgent i√ßin)
 */
async function createAuditLog({
    personelId,
    action,
    tableName,
    recordId,
    oldValues = null,
    newValues = null,
    description = null,
    req = null
}) {
    try {
        await prisma.auditLog.create({
            data: {
                personelId,
                action,
                tableName,
                recordId: String(recordId),
                oldValues: oldValues ? JSON.stringify(oldValues) : null,
                newValues: newValues ? JSON.stringify(newValues) : null,
                description,
                ipAddress: req?.ip || req?.connection?.remoteAddress || 'localhost',
                userAgent: req?.headers?.[`user-agent`] || req?.get?.('User-Agent') || 'Unknown',
                sessionId: req?.sessionID || null
            }
        });

        console.log(`üìù AUDIT LOG: ${personelId} ${action} ${tableName}#${recordId}`);
    } catch (error) {
        console.error('‚ùå Audit log hatasƒ±:', error);
        // Audit log hatasƒ± ana i≈ülemi durdurmamalƒ±
    }
}

/**
 * üîÑ TABLO G√úNCELLEMESƒ∞ ƒ∞LE PERSONEL TAKƒ∞Bƒ∞
 * Herhangi bir tabloyu g√ºncellerken otomatik personel tracking
 * 
 * @param {string} tableName - Tablo adƒ± ("siparis", "urun", "cari", vb.)
 * @param {string|number} recordId - Kayƒ±t ID'si
 * @param {object} updateData - G√ºncellenecek veriler
 * @param {string} personelId - ƒ∞≈ülemi yapan personelin ID'si
 * @param {string} action - Yapƒ±lan i≈ülem a√ßƒ±klamasƒ±
 * @param {object} req - HTTP request object
 */
async function updateWithTracking({
    tableName,
    recordId,
    updateData,
    personelId,
    action,
    req = null
}) {
    try {
        // Eski veriyi al
        const oldRecord = await prisma[tableName].findUnique({
            where: { id: parseInt(recordId) }
        });

        // Yeni tracking bilgilerini ekle
        const dataWithTracking = {
            ...updateData,
            lastModifiedBy: personelId,
            lastModifiedAt: new Date(),
            lastAction: action
        };

        // G√ºncelle
        const updatedRecord = await prisma[tableName].update({
            where: { id: parseInt(recordId) },
            data: dataWithTracking
        });

        // Audit log olu≈ütur
        await createAuditLog({
            personelId,
            action: 'UPDATE',
            tableName: tableName.toUpperCase(),
            recordId,
            oldValues: oldRecord,
            newValues: updatedRecord,
            description: action,
            req
        });

        return updatedRecord;

    } catch (error) {
        console.error(`‚ùå ${tableName} g√ºncelleme hatasƒ±:`, error);
        throw error;
    }
}

/**
 * ‚úÖ Sƒ∞PARƒ∞≈û ONAYLAMA ƒ∞≈ûLEMƒ∞
 * √ñrnek: Sipari≈ü onaylama i≈ülemi nasƒ±l loglanƒ±r
 */
async function approveSiparis(siparisId, personelId, req) {
    try {
        const result = await updateWithTracking({
            tableName: 'siparis',
            recordId: siparisId,
            updateData: {
                durum: 'HAZIRLLANACAK',
                onaylanmaTarihi: new Date(),
                onaylayanId: personelId // Eski sistem i√ßin de compat
            },
            personelId,
            action: 'Sƒ∞PARƒ∞≈û_ONAYLANDI',
            req
        });

        console.log(`‚úÖ Sipari≈ü #${siparisId} ${personelId} tarafƒ±ndan onaylandƒ±`);
        return result;

    } catch (error) {
        console.error('‚ùå Sipari≈ü onaylama hatasƒ±:', error);
        throw error;
    }
}

/**
 * üí∞ √úR√úN Fƒ∞YATI G√úNCELLEMESƒ∞
 * √ñrnek: √úr√ºn fiyatƒ± deƒüi≈üikliƒüi nasƒ±l loglanƒ±r
 */
async function updateUrunFiyati(urunId, yeniFiyat, personelId, req) {
    try {
        const result = await updateWithTracking({
            tableName: 'urun',
            recordId: urunId,
            updateData: {
                kgFiyati: yeniFiyat,
                guncellemeTarihi: new Date()
            },
            personelId,
            action: `Fƒ∞YAT_G√úNCELLENDƒ∞: ‚Ç∫${yeniFiyat}`,
            req
        });

        console.log(`üí∞ √úr√ºn #${urunId} fiyatƒ± ‚Ç∫${yeniFiyat} olarak g√ºncellendi (${personelId})`);
        return result;

    } catch (error) {
        console.error('‚ùå √úr√ºn fiyatƒ± g√ºncelleme hatasƒ±:', error);
        throw error;
    }
}

/**
 * üìä AUDIT RAPORU OLU≈ûTURMA
 * Belirli bir tarih aralƒ±ƒüƒ±nda hangi personel ne yaptƒ±?
 */
async function getAuditReport(startDate, endDate, personelId = null, tableName = null) {
    try {
        const whereClause = {
            timestamp: {
                gte: new Date(startDate),
                lte: new Date(endDate)
            }
        };

        if (personelId) whereClause.personelId = personelId;
        if (tableName) whereClause.tableName = tableName.toUpperCase();

        const auditLogs = await prisma.auditLog.findMany({
            where: whereClause,
            include: {
                personel: {
                    select: {
                        personelId: true,
                        ad: true,
                        soyad: true,
                        rol: true
                    }
                }
            },
            orderBy: { timestamp: 'desc' },
            take: 1000 // Limit 1000 kayƒ±t
        });

        // √ñzet istatistikler
        const summary = {
            totalActions: auditLogs.length,
            actionsByPersonel: {},
            actionsByTable: {},
            actionsByType: {}
        };

        auditLogs.forEach(log => {
            // Personel bazƒ±nda
            const personelKey = `${log.personel.ad} ${log.personel.soyad} (${log.personelId})`;
            summary.actionsByPersonel[personelKey] = (summary.actionsByPersonel[personelKey] || 0) + 1;

            // Tablo bazƒ±nda
            summary.actionsByTable[log.tableName] = (summary.actionsByTable[log.tableName] || 0) + 1;

            // ƒ∞≈ülem tipi bazƒ±nda
            summary.actionsByType[log.action] = (summary.actionsByType[log.action] || 0) + 1;
        });

        return {
            summary,
            logs: auditLogs
        };

    } catch (error) {
        console.error('‚ùå Audit raporu hatasƒ±:', error);
        throw error;
    }
}

/**
 * üë§ PERSONEL ID OLU≈ûTURMA
 * Yeni personel eklenirken otomatik P001, P002, P003... formatƒ±nda ID olu≈ütur
 */
async function generatePersonelId() {
    try {
        // Son personel ID'sini bul
        const lastUser = await prisma.user.findFirst({
            where: {
                personelId: {
                    startsWith: 'P'
                }
            },
            orderBy: {
                personelId: 'desc'
            }
        });

        let nextNumber = 1;
        if (lastUser && lastUser.personelId) {
            const lastNumber = parseInt(lastUser.personelId.substring(1));
            nextNumber = lastNumber + 1;
        }

        // P001, P002, P003... formatƒ±nda
        const newPersonelId = `P${nextNumber.toString().padStart(3, '0')}`;

        console.log(`üë§ Yeni personel ID olu≈üturuldu: ${newPersonelId}`);
        return newPersonelId;

    } catch (error) {
        console.error('‚ùå Personel ID olu≈üturma hatasƒ±:', error);
        throw error;
    }
}

// ===================================================================
// ES6 EXPORTS
// ===================================================================

export {
    createAuditLog,
    updateWithTracking,
    approveSiparis,
    updateUrunFiyati,
    getAuditReport,
    generatePersonelId
};

// auditLog alias for backward compatibility
export const auditLog = createAuditLog;

// Default export
export default {
    createAuditLog,
    auditLog: createAuditLog,
    updateWithTracking,
    approveSiparis,
    updateUrunFiyati,
    getAuditReport,
    generatePersonelId
}; 