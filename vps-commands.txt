# =================================================================
# 🚀 VPS'te Çalıştırılacak Komutlar (Sırayla)
# SSH'la bağlandıktan sonra bu komutları kopyala-yapıştır
# =================================================================

# 1. Script dosyası oluştur
cat > hostinger-full-deploy.sh << 'SCRIPT_EOF'
#!/bin/bash
# =================================================================
# 🚀 OG SİPARİŞ - HOSTİNGER VPS FULL DEPLOYMENT SCRIPT
# Backend + Frontend + PostgreSQL + Nginx + SSL
# =================================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🚀 OG Sipariş Hostinger VPS Deployment Başlıyor...${NC}"

# Configuration
PROJECT_NAME="og-siparis"
BACKEND_DIR="/var/www/og-backend" 
FRONTEND_DIR="/var/www/og-frontend"
DOMAIN=${1:-"ogsiparis.com"}
DB_NAME="ogformdb"
DB_PASS=${2:-"$(openssl rand -base64 32)"}

echo -e "${YELLOW}📋 Konfigürasyon:${NC}"
echo "Domain: $DOMAIN"
echo "Backend: $BACKEND_DIR"
echo "Frontend: $FRONTEND_DIR"
echo "Database: $DB_NAME"

# =================================================================
# 1. SYSTEM UPDATE & DEPENDENCIES
# =================================================================
echo -e "${BLUE}📦 Sistem güncelleniyor ve gerekli paketler kuruluyor...${NC}"

apt update && apt upgrade -y
apt install -y curl wget git nginx postgresql postgresql-contrib ufw fail2ban

# =================================================================
# 2. NODE.JS INSTALLATION
# =================================================================
echo -e "${BLUE}📦 Node.js kuruluyor...${NC}"

curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt install -y nodejs

# PM2 kurulumu
npm install -g pm2

# Versiyonları kontrol et
node --version
npm --version
pm2 --version

# =================================================================
# 3. POSTGRESQL SETUP
# =================================================================
echo -e "${BLUE}🗄️ PostgreSQL yapılandırılıyor...${NC}"

systemctl start postgresql
systemctl enable postgresql

# Database ve kullanıcı oluştur
sudo -u postgres psql << EOF
CREATE DATABASE $DB_NAME;
CREATE USER ogform WITH ENCRYPTED PASSWORD '$DB_PASS';
ALTER ROLE ogform SET client_encoding TO 'utf8';
ALTER ROLE ogform SET default_transaction_isolation TO 'read committed';
ALTER ROLE ogform SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO ogform;
\q
EOF

echo -e "${GREEN}✅ PostgreSQL kuruldu - DB: $DB_NAME, User: ogform${NC}"

# =================================================================
# 4. BACKEND DEPLOYMENT
# =================================================================
echo -e "${BLUE}🔧 Backend deploy ediliyor...${NC}"

# Backend klasörünü oluştur
mkdir -p $BACKEND_DIR
cd $BACKEND_DIR

# GitHub'dan backend'i klonla
if [ ! -d ".git" ]; then
    git clone https://github.com/MehmetEminSelek/ogBackend.git .
else
    git pull origin main
fi

# Dependencies kur
npm install

# Production .env oluştur
cat > .env << EOF
# OG Backend API - Production Environment
NODE_ENV=production
PORT=3000

# Database Configuration
DATABASE_URL="postgresql://ogform:$DB_PASS@localhost:5432/$DB_NAME?schema=public"

# JWT Secret
JWT_SECRET="og-siparis-super-secret-jwt-key-production-$(date +%s)"

# API Domain Configuration  
NEXT_PUBLIC_API_URL=https://$DOMAIN/api
CORS_ORIGIN=https://$DOMAIN

# Email Configuration (Hostinger SMTP)
SMTP_HOST=smtp.hostinger.com
SMTP_PORT=587
SMTP_USER=admin@$DOMAIN
SMTP_PASS=your-email-password

# File Upload
MAX_FILE_SIZE=10MB
UPLOAD_DIR=./uploads

# Security
BCRYPT_ROUNDS=12
EOF

# Prisma generate ve migrate
npx prisma generate
npx prisma db push

# Build project
npm run build

echo -e "${GREEN}✅ Backend hazır!${NC}"

# =================================================================
# 5. FRONTEND DEPLOYMENT  
# =================================================================
echo -e "${BLUE}🎨 Frontend deploy ediliyor...${NC}"

# Frontend klasörünü oluştur
mkdir -p $FRONTEND_DIR
cd $FRONTEND_DIR

# GitHub'dan frontend'i klonla
if [ ! -d ".git" ]; then
    git clone https://github.com/MehmetEminSelek/ogFrontend.git .
else
    git pull origin main
fi

# Dependencies kur
npm install

# Production .env oluştur
cat > .env.production << EOF
NEXT_PUBLIC_API_URL=https://$DOMAIN/api
NEXT_PUBLIC_SITE_URL=https://$DOMAIN
NODE_ENV=production
EOF

# Build project
npm run build

echo -e "${GREEN}✅ Frontend hazır!${NC}"

# =================================================================
# 6. PM2 CONFIGURATION
# =================================================================
echo -e "${BLUE}⚙️ PM2 yapılandırılıyor...${NC}"

# Backend PM2 başlat
cd $BACKEND_DIR
pm2 start ecosystem.config.js --env production

# Frontend PM2 başlat  
cd $FRONTEND_DIR
pm2 start npm --name "og-frontend" -- start -- -p 5173

# PM2 kaydet ve startup
pm2 save
pm2 startup

echo -e "${GREEN}✅ PM2 çalışıyor!${NC}"

# =================================================================
# 7. NGINX CONFIGURATION
# =================================================================
echo -e "${BLUE}🌐 Nginx yapılandırılıyor...${NC}"

# Nginx konfigürasyonu
cat > /etc/nginx/sites-available/$DOMAIN << EOF
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;

    # Frontend (Ana sayfa)
    location / {
        proxy_pass http://localhost:5173;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }

    # Backend API
    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }

    # Static files
    location /_next/static/ {
        proxy_pass http://localhost:5173;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
EOF

# Nginx site'ı aktifleştir
ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default

# Nginx test ve restart
nginx -t
systemctl restart nginx

echo -e "${GREEN}✅ Nginx yapılandırıldı!${NC}"

# =================================================================
# 8. FIREWALL CONFIGURATION
# =================================================================
echo -e "${BLUE}🔒 Firewall yapılandırılıyor...${NC}"

ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 'Nginx Full'
ufw --force enable

echo -e "${GREEN}✅ Firewall aktif!${NC}"

# =================================================================
# 9. SSL CERTIFICATE (Let's Encrypt)
# =================================================================
echo -e "${BLUE}🔐 SSL sertifikası kuruluyor...${NC}"

# Certbot kur
apt install -y certbot python3-certbot-nginx

# SSL sertifikası al
certbot --nginx -d $DOMAIN -d www.$DOMAIN --non-interactive --agree-tos --email admin@$DOMAIN

# Otomatik yenileme
echo "0 3 * * * certbot renew --quiet" | crontab -

echo -e "${GREEN}✅ SSL kuruldu!${NC}"

# =================================================================
# 10. DEPLOYMENT INFO
# =================================================================
echo -e "${GREEN}🎉 DEPLOYMENT TAMAMLANDI!${NC}"
echo -e "${YELLOW}📋 Bilgiler:${NC}"
echo "Website: https://$DOMAIN"
echo "API: https://$DOMAIN/api"
echo "Database: $DB_NAME (User: ogform)"
echo ""
echo -e "${YELLOW}🔧 Yönetim Komutları:${NC}"
echo "PM2 durumu: pm2 list"
echo "PM2 logları: pm2 logs"
echo "Nginx test: nginx -t"
echo "SSL yenile: certbot renew"
echo ""
echo -e "${YELLOW}📁 Klasörler:${NC}"
echo "Backend: $BACKEND_DIR"
echo "Frontend: $FRONTEND_DIR"
echo ""
echo -e "${GREEN}✅ Siteniz hazır: https://$DOMAIN${NC}"
SCRIPT_EOF

# 2. Script'i çalıştırılabilir yap
chmod +x hostinger-full-deploy.sh

# 3. Deployment'ı başlat
./hostinger-full-deploy.sh ogsiparis.com 