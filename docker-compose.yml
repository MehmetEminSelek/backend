version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: og-backend-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ogformdb
      POSTGRES_USER: ogform
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure-db-password-2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ogform -d ogformdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: og-backend-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://ogform:${DB_PASSWORD:-secure-db-password-2024}@database:5432/ogformdb?schema=public
      JWT_SECRET: ${JWT_SECRET:-og-secure-jwt-secret-2024}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://ogsiparis.com}
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${API_URL:-https://ogsiparis.com/api}
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - backend-network
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./.env.production:/app/.env.production:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/dropdown || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo '⏳ Database bağlantısı bekleniyor...' &&
        sleep 15 &&
        echo '🔄 Database migration çalıştırılıyor...' &&
        npx prisma migrate deploy &&
        echo '🌱 Seed data yükleniyor...' &&
        npm run seed || echo 'Seed data zaten yüklü' &&
        echo '🚀 Backend API başlatılıyor...' &&
        npm run start
      "

  # Nginx API Gateway
  nginx:
    image: nginx:alpine
    container_name: og-backend-nginx
    restart: unless-stopped
    ports:
      - "3080:80"
      - "3443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - backend-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Backup Service (Cron-like)
  backup:
    image: postgres:15-alpine
    container_name: og-backend-backup
    restart: unless-stopped
    environment:
      PGPASSWORD: ${DB_PASSWORD:-secure-db-password-2024}
    volumes:
      - ./backups:/backups
      - ./backup-script.sh:/backup-script.sh:ro
    networks:
      - backend-network
    depends_on:
      database:
        condition: service_healthy
    command: >
      sh -c "
        while true; do
          echo 'Waiting for next backup cycle...'
          sleep 86400
          echo 'Running database backup...'
          pg_dump -h database -U ogform -d ogformdb > /backups/ogformdb_$(date +%Y%m%d_%H%M%S).sql &&
          gzip /backups/ogformdb_$(date +%Y%m%d_%H%M%S).sql &&
          find /backups -name 'ogformdb_*.sql.gz' -mtime +7 -delete &&
          echo 'Backup completed successfully'
        done
      "
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local

networks:
  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16