// schema.prisma (Kullanıcı İsteğine Göre Güncellendi)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Lookup Modelleri ---
model TeslimatTuru {
  id         Int       @id @default(autoincrement())
  ad         String    @unique
  kodu       String?
  siparisler Siparis[]
}

model Sube {
  id         Int       @id @default(autoincrement())
  ad         String    @unique
  kodu       String?
  siparisler Siparis[]
}

model GonderenAliciTipi {
  id         Int       @id @default(autoincrement())
  ad         String    @unique
  kodu       String?
  siparisler Siparis[]
}

model Ambalaj {
  id               Int             @id @default(autoincrement())
  ad               String          @unique
  kodu             String?
  siparisKalemleri SiparisKalemi[]
}

model TepsiTava {
  id               Int             @id @default(autoincrement())
  ad               String          @unique
  kodu             String?
  fiyat            Float?
  siparisKalemleri SiparisKalemi[]
}

model Kutu {
  id               Int             @id @default(autoincrement())
  ad               String          @unique
  kodu             String?
  siparisKalemleri SiparisKalemi[]
}

model Urun {
  id               Int             @id @default(autoincrement())
  ad               String          @unique
  kodu             String?
  // excelKodu alanı kaldırıldı
  fiyatlar         Fiyat[]
  siparisKalemleri SiparisKalemi[]
}

model Fiyat {
  id            Int       @id @default(autoincrement())
  urunId        Int
  urun          Urun      @relation(fields: [urunId], references: [id], onDelete: Cascade)
  fiyat         Float
  birim         String    // "KG", "Adet" vb.
  gecerliTarih  DateTime  @db.Date // Başlangıç tarihi
  bitisTarihi   DateTime? @db.Date // <<< TEKRAR EKLENDİ: Bitiş tarihi (null olabilir)
  createdAt     DateTime  @default(now())

  @@unique([urunId, birim, gecerliTarih]) // Başlangıç tarihi hala unique olmalı
}


// --- Ana Modeller ---
model Siparis {
  id                Int                @id @default(autoincrement())
  tarih             DateTime           @db.Date
  teslimatTuruId    Int
  subeId            Int?
  gonderenTipiId    Int?
  gonderenAdi       String
  gonderenTel       String
  aliciAdi          String?
  aliciTel          String?
  adres             String?
  aciklama          String?
  gorunecekAd       String?
  birimFiyat        Float?             @default(0)
  onaylandiMi       Boolean            @default(false)
  kargoUcreti       Float?             @default(0)
  digerHizmetTutari Float?             @default(0)
  toplamTepsiMaliyeti Float?           @default(0) // <<< BU SATIRIN OLDUĞUNDAN EMİN OL
  hazirlanmaDurumu  String             @default("Bekliyor") // <<< YENİ ALAN: "Bekliyor", "Hazırlanıyor", "Hazırlandı"
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  teslimatTuru      TeslimatTuru       @relation(fields: [teslimatTuruId], references: [id])
  sube              Sube?              @relation(fields: [subeId], references: [id])
  gonderenAliciTipi GonderenAliciTipi? @relation(fields: [gonderenTipiId], references: [id])
  kalemler          SiparisKalemi[]
}

model SiparisKalemi {
  id            Int        @id @default(autoincrement())
  siparisId     Int
  ambalajId     Int
  urunId        Int
  miktar        Float
  birim         String
  birimFiyat    Float?
  tepsiTavaId   Int?
  kutuId        Int?

  siparis       Siparis    @relation(fields: [siparisId], references: [id], onDelete: Cascade)
  ambalaj       Ambalaj    @relation(fields: [ambalajId], references: [id])
  urun          Urun       @relation(fields: [urunId], references: [id])
  tepsiTava     TepsiTava? @relation(fields: [tepsiTavaId], references: [id])
  kutu          Kutu?      @relation(fields: [kutuId], references: [id])

  @@index([siparisId])
  @@index([tepsiTavaId])
  @@index([kutuId])
}

