// schema.prisma (Kullanıcı İsteğine Göre Güncellendi)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Lookup Modelleri ---
model TeslimatTuru {
  id         Int       @id @default(autoincrement())
  ad         String    @unique
  kodu       String?
  siparisler Siparis[]
}

model Sube {
  id         Int       @id @default(autoincrement())
  ad         String    @unique
  kodu       String?
  siparisler Siparis[]
  cariler    Cari[]    // Cari ile ilişki
}

model GonderenAliciTipi {
  id         Int       @id @default(autoincrement())
  ad         String    @unique
  kodu       String?
  siparisler Siparis[]
}

model Ambalaj {
  id               Int             @id @default(autoincrement())
  ad               String          @unique
  kodu             String?
  siparisKalemleri SiparisKalemi[]
}

model TepsiTava {
  id               Int             @id @default(autoincrement())
  ad               String          @unique
  kodu             String?
  fiyat            Float?
  siparisKalemleri SiparisKalemi[]
}

model Kutu {
  id               Int             @id @default(autoincrement())
  ad               String          @unique
  kodu             String?
  siparisKalemleri SiparisKalemi[]
}

// Ürün Kategorisi Modeli
model UrunKategori {
  id          Int      @id @default(autoincrement())
  ad          String   @unique
  aciklama    String?
  renk        String?  // Kategori rengi (UI için)
  ikon        String?  // Kategori ikonu
  aktif       Boolean  @default(true)
  siraNo      Int?     // Sıralama için
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  urunler     Urun[]
}

// Geliştirilmiş Ürün Modeli
model Urun {
  id               Int             @id @default(autoincrement())
  ad               String          @unique
  kodu             String?         @unique
  aciklama         String?         // Ürün açıklaması
  kisaAciklama     String?         // Kısa açıklama
  kategoriId       Int?            // Kategori ilişkisi
  kategori         UrunKategori?   @relation(fields: [kategoriId], references: [id])
  
  // Görsel ve Medya
  anaGorsel        String?         // Ana ürün görseli URL
  galeriGorseller  String[]        // Ek görseller (JSON array)
  
  // Ürün Özellikleri
  agirlik          Float?          // Standart ağırlık (gram)
  boyutlar         String?         // Boyut bilgisi (JSON: {en, boy, yukseklik})
  renk             String?         // Ürün rengi
  malzeme          String?         // Ana malzeme
  mensei           String?         // Menşei ülke
  
  // Stok ve Satış Bilgileri
  stokKodu         String?         // Stok kodu
  barkod           String?         @unique // Barkod
  minStokMiktari   Float?          @default(0) // Minimum stok miktarı
  maxStokMiktari   Float?          // Maksimum stok miktarı
  kritikStokSeviye Float?          @default(10) // Kritik stok seviyesi
  
  // Satış Bilgileri
  satisaBirimi     String?         @default("KG") // Satış birimi
  minSatisMiktari  Float?          @default(1) // Minimum satış miktarı
  maxSatisMiktari  Float?          // Maksimum satış miktarı
  
  // Durum ve Kontrol
  aktif            Boolean         @default(true)
  satisaUygun      Boolean         @default(true)
  ozelUrun         Boolean         @default(false) // Özel/premium ürün
  yeniUrun         Boolean         @default(false) // Yeni ürün
  indirimliUrun    Boolean         @default(false) // İndirimli ürün
  
  // SEO ve Arama
  seoBaslik        String?         // SEO başlık
  seoAciklama      String?         // SEO açıklama
  anahtarKelimeler String[]        // Arama anahtar kelimeleri
  
  // Üretim Bilgileri
  uretimSuresi     Int?            // Üretim süresi (dakika)
  rafOmru          Int?            // Raf ömrü (gün)
  saklamaKosullari String?         // Saklama koşulları
  
  // Maliyet Bilgileri
  maliyetFiyati    Float?          // Maliyet fiyatı
  karMarji         Float?          // Kar marjı (%)
  
  // Tarih Bilgileri
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  createdBy        Int?            // Oluşturan kullanıcı
  updatedBy        Int?            // Güncelleyen kullanıcı
  
  // İlişkiler
  fiyatlar         Fiyat[]
  siparisKalemleri SiparisKalemi[]
  recipes          Recipe[]
  ozelTepsiIcerikleri OzelTepsiIcerik[]
  
  // İndeksler
  @@index([kategoriId])
  @@index([aktif])
  @@index([satisaUygun])
  @@index([stokKodu])
  @@index([barkod])
}

model Fiyat {
  id            Int       @id @default(autoincrement())
  urunId        Int
  urun          Urun      @relation(fields: [urunId], references: [id], onDelete: Cascade)
  fiyat         Float
  birim         String    // "KG", "Adet" vb.
  fiyatTipi     String    @default("normal") // "normal", "kampanya", "toptan", "perakende"
  minMiktar     Float?    // Minimum miktar (toptan için)
  maxMiktar     Float?    // Maximum miktar
  iskonto       Float?    @default(0) // İskonto oranı
  vergiOrani    Float?    @default(18) // KDV oranı
  gecerliTarih  DateTime  @db.Date // Başlangıç tarihi
  bitisTarihi   DateTime? @db.Date // Bitiş tarihi (null olabilir)
  aktif         Boolean   @default(true)
  createdAt     DateTime  @default(now())
  createdBy     Int?      // Oluşturan kullanıcı

  @@unique([urunId, birim, gecerliTarih]) // Başlangıç tarihi hala unique olmalı
  @@index([aktif])
  @@index([fiyatTipi])
}

// --- Ana Modeller ---
model Siparis {
  id                Int                @id @default(autoincrement())
  tarih             DateTime           @db.Date
  teslimatTuruId    Int
  subeId            Int?
  gonderenTipiId    Int?
  gonderenAdi       String
  gonderenTel       String
  aliciAdi          String?
  aliciTel          String?
  adres             String?
  aciklama          String?
  gorunecekAd       String?
  birimFiyat        Float?             @default(0)
  onaylandiMi       Boolean            @default(false)
  kargoUcreti       Float?             @default(0)
  digerHizmetTutari Float?             @default(0)
  toplamTepsiMaliyeti Float?           @default(0)
  hazirlanmaDurumu  String             @default("Bekliyor")
  // --- Kargo/Transfer Alanları ---
  kargoDurumu       String?            // Enum gibi: "Hazırlanıyor", "Kargoya Verilecek", "Kargoda", "Teslim Edildi", "Şubeye Gönderilecek", "Şubede Teslim"
  kargoSirketi      String?
  kargoTakipNo      String?
  kargoNotu         String?
  kargoTarihi       DateTime?
  teslimTarihi      DateTime?
  hedefSubeId       Int?
  // ---
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cariId            Int?
  cari              Cari?              @relation(fields: [cariId], references: [id])

  teslimatTuru      TeslimatTuru       @relation(fields: [teslimatTuruId], references: [id])
  sube              Sube?              @relation(fields: [subeId], references: [id])
  gonderenAliciTipi GonderenAliciTipi? @relation(fields: [gonderenTipiId], references: [id])
  kalemler          SiparisKalemi[]
  odemeler          Odeme[] 
}

model SiparisKalemi {
  id            Int        @id @default(autoincrement())
  siparisId     Int
  ambalajId     Int
  urunId        Int
  miktar        Float
  birim         String
  birimFiyat    Float?
  tepsiTavaId   Int?
  kutuId        Int?

  siparis       Siparis    @relation(fields: [siparisId], references: [id], onDelete: Cascade)
  ambalaj       Ambalaj    @relation(fields: [ambalajId], references: [id])
  urun          Urun       @relation(fields: [urunId], references: [id])
  tepsiTava     TepsiTava? @relation(fields: [tepsiTavaId], references: [id])
  kutu          Kutu?      @relation(fields: [kutuId], references: [id])

  @@index([siparisId])
  @@index([tepsiTavaId])
  @@index([kutuId])
}

model Odeme {
  id           Int       @id @default(autoincrement())
  siparisId    Int       // Hangi siparişe ait
  tutar        Float     // Ödenen tutar
  odemeTarihi  DateTime  @default(now()) @db.Timestamp(6) // Ödemenin yapıldığı tarih/saat
  odemeYontemi String?   // Opsiyonel: "Nakit", "Kredi Kartı", "Havale" vb.
  aciklama     String?   // Opsiyonel: Ödeme ile ilgili not

  siparis      Siparis   @relation(fields: [siparisId], references: [id], onDelete: Cascade) // Sipariş silinirse ödemeler de silinsin

  @@index([siparisId]) // Siparişe göre ödemeleri hızlı bulmak için
}

model OperasyonBirimi {
  id      Int    @id @default(autoincrement())
  ad      String
  kod     String @unique
  stoklar Stok[]
}

model Hammadde {
  id      Int    @id @default(autoincrement())
  ad      String
  kod     String @unique
  stoklar Stok[]
}

model YariMamul {
  id      Int    @id @default(autoincrement())
  ad      String
  kod     String @unique
  stoklar Stok[]
}

model Stok {
  id                Int    @id @default(autoincrement())
  hammaddeId        Int?
  yariMamulId       Int?
  operasyonBirimiId Int
  miktarGram        Float
  minimumMiktarGram Float? @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  hammadde          Hammadde? @relation(fields: [hammaddeId], references: [id])
  yariMamul         YariMamul? @relation(fields: [yariMamulId], references: [id])
  operasyonBirimi   OperasyonBirimi @relation(fields: [operasyonBirimiId], references: [id])

  kaynakOlduguTransferler StokTransfer[] @relation("KaynakStok")
  hedefOlduguTransferler  StokTransfer[] @relation("HedefStok")
  hareketler              StokHareket[]

  @@unique([hammaddeId, operasyonBirimiId])
  @@unique([yariMamulId, operasyonBirimiId])
}

model Recipe {
  id          Int                 @id @default(autoincrement())
  name        String              // Reçete adı (örn: FISTIKLI KURABİYE)
  urunId      Int?                // İlgili ürün (varsa)
  urun        Urun?               @relation(fields: [urunId], references: [id])
  ingredients RecipeIngredient[]  // İçerik listesi
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model RecipeIngredient {
  id         Int      @id @default(autoincrement())
  recipeId   Int
  stokKod    String   // Hammadde veya Yarı Mamul kodu
  miktarGram Float
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model StokTransfer {
  id           Int      @id @default(autoincrement())
  kaynakStokId Int
  hedefStokId  Int
  miktarGram   Float
  aciklama     String?
  createdAt    DateTime @default(now())
  userId       Int?

  kaynakStok   Stok     @relation("KaynakStok", fields: [kaynakStokId], references: [id])
  hedefStok    Stok     @relation("HedefStok", fields: [hedefStokId], references: [id])
  user         User?    @relation(fields: [userId], references: [id])
}

model StokHareket {
  id         Int      @id @default(autoincrement())
  stokId     Int
  tip        String   // 'giris', 'cikis', 'transfer'
  miktarGram Float
  aciklama   String?
  createdAt  DateTime @default(now())
  userId     Int?

  stok       Stok     @relation(fields: [stokId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
}

model User {
  id           Int      @id @default(autoincrement())
  ad           String
  email        String?   
  passwordHash String
  role         String   // 'admin', 'user', etc.
  createdAt    DateTime @default(now())
  sgkDurumu    String?
  girisYili    Int?
  sube         String?
  erpPasifAktif Boolean @default(true)
  gunlukUcret  Float?
  hareketler   StokHareket[]
  transferler  StokTransfer[]
}

model Cari {
  id           Int           @id @default(autoincrement())
  ad           String
  telefon      String?
  email        String?       @unique
  aciklama     String?
  bakiye       Float         @default(0)
  hareketler   CariHareket[]
  siparisler   Siparis[]
  adresler     Adres[]       // Çoklu adres desteği
  musteriKodu  String       @unique
  subeId       Int?          // Şube ilişkisi
  sube         Sube?         @relation(fields: [subeId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Adres {
  id        Int      @id @default(autoincrement())
  cariId    Int
  tip       String   // Ev, İş, vb.
  adres     String
  cari      Cari     @relation(fields: [cariId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CariHareket {
  id           Int       @id @default(autoincrement())
  cariId       Int
  cari         Cari      @relation(fields: [cariId], references: [id])
  tip          String    // 'siparis', 'odeme', 'duzeltme' vs.
  tutar        Float
  aciklama     String?
  vadeTarihi   DateTime?
  direction    String    // 'borc' veya 'alacak'
  createdAt    DateTime  @default(now())
}

model OzelTepsi {
  id          Int                @id @default(autoincrement())
  kod         String             @unique
  ad          String
  aciklama    String?
  fiyat       Float
  toplamKg    Float              // Toplam ağırlık (kg)
  icindekiler OzelTepsiIcerik[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model OzelTepsiIcerik {
  id           Int        @id @default(autoincrement())
  ozelTepsiId  Int
  urunId       Int
  miktar       Float      // KG cinsinden miktar
  ozelTepsi    OzelTepsi  @relation(fields: [ozelTepsiId], references: [id], onDelete: Cascade)
  urun         Urun       @relation(fields: [urunId], references: [id])

  @@unique([ozelTepsiId, urunId])
}