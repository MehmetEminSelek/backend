// seed-real-products.js
// Ger√ßek baklavacƒ± √ºr√ºnleri i√ßin seed script'i

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function seedRealProducts() {
    try {
        console.log('üçØ Baklavacƒ± √ºr√ºnleri ekleniyor...\n');

        // √ñnce mevcut test verilerini temizle (isteƒüe baƒülƒ±)
        console.log('üßπ Mevcut test verileri temizleniyor...');

        // Test kategorilerini ve √ºr√ºnlerini sil
        await prisma.fiyat.deleteMany({});
        await prisma.urun.deleteMany({});
        await prisma.urunKategori.deleteMany({});

        console.log('‚úÖ Test verileri temizlendi.\n');

        // 1. Baklavacƒ± kategorilerini olu≈ütur
        console.log('üìÇ Kategoriler olu≈üturuluyor...');

        const kategoriler = [
            {
                ad: 'Baklava √áe≈üitleri',
                aciklama: 'Geleneksel ve √∂zel baklava √ße≈üitleri',
                renk: '#FFD700',
                ikon: 'mdi-layers-triple',
                siraNo: 1
            },
            {
                ad: '≈ûerbetli Tatlƒ±lar',
                aciklama: '≈ûerbetli geleneksel tatlƒ±lar',
                renk: '#FF6B35',
                ikon: 'mdi-cup',
                siraNo: 2
            },
            {
                ad: 'S√ºtl√º Tatlƒ±lar',
                aciklama: 'Muhallebi, s√ºtla√ß ve benzeri',
                renk: '#4ECDC4',
                ikon: 'mdi-glass-mug-variant',
                siraNo: 3
            },
            {
                ad: 'B√∂rek √áe≈üitleri',
                aciklama: 'Su b√∂reƒüi, sigara b√∂reƒüi vs.',
                renk: '#45B7D1',
                ikon: 'mdi-food-croissant',
                siraNo: 4
            },
            {
                ad: 'Kurabiye & √á√∂rek',
                aciklama: 'Kurabiye ve √ß√∂rek √ße≈üitleri',
                renk: '#96CEB4',
                ikon: 'mdi-cookie',
                siraNo: 5
            },
            {
                ad: '√ñzel √úr√ºnler',
                aciklama: 'Sezonluk ve √∂zel g√ºnler i√ßin',
                renk: '#FFEAA7',
                ikon: 'mdi-star',
                siraNo: 6
            }
        ];

        const olu≈üturulanKategoriler = {};
        for (const kategori of kategoriler) {
            const yeniKategori = await prisma.urunKategori.create({
                data: kategori
            });
            olu≈üturulanKategoriler[kategori.ad] = yeniKategori;
            console.log(`   ‚úÖ ${kategori.ad} kategorisi olu≈üturuldu`);
        }

        console.log('\nüì¶ √úr√ºnler ekleniyor...');
        console.log('‚è≥ L√ºtfen √ºr√ºnlerinizi a≈üaƒüƒ±ya ekleyin...\n');

        // BURAYA √úR√úNLER EKLENECEKTƒ∞R
        // √ñrnek format:
        /*
        const urunler = [
            {
                ad: 'Fƒ±stƒ±klƒ± Baklava',
                kategoriId: olu≈üturulanKategoriler['Baklava √áe≈üitleri'].id,
                aciklama: 'Antep fƒ±stƒ±ƒüƒ± ile hazƒ±rlanan geleneksel baklava',
                satisaBirimi: 'KG',
                aktif: true,
                fiyat: 120.00,
                birim: 'KG'
            },
            // ... diƒüer √ºr√ºnler
        ];

        for (const urunData of urunler) {
            const { fiyat, birim, ...urunBilgileri } = urunData;
            
            const yeniUrun = await prisma.urun.create({
                data: urunBilgileri
            });

            if (fiyat && birim) {
                await prisma.fiyat.create({
                    data: {
                        urunId: yeniUrun.id,
                        fiyat: fiyat,
                        birim: birim,
                        gecerliTarih: new Date(),
                        aktif: true
                    }
                });
            }

            console.log(`   ‚úÖ ${urunData.ad} eklendi`);
        }
        */

        console.log('\nüéâ Kategoriler hazƒ±r! √úr√ºnleri eklemek i√ßin script\'i d√ºzenleyin.');
        console.log('\nüìã Olu≈üturulan kategoriler:');
        Object.values(olu≈üturulanKategoriler).forEach(kat => {
            console.log(`   ‚Ä¢ ${kat.ad} (ID: ${kat.id})`);
        });

    } catch (error) {
        console.error('‚ùå Hata olu≈ütu:', error.message);
    } finally {
        await prisma.$disconnect();
    }
}

// Script'i √ßalƒ±≈ütƒ±r
if (require.main === module) {
    seedRealProducts();
}

module.exports = { seedRealProducts }; 