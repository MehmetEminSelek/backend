import prisma from '../../../lib/prisma.js';

// Yardƒ±mcƒ± fonksiyon: Re√ßeteyi √ß√∂z ve malzemeleri bul
async function resolveRecipeMaterials(urunId, miktar) {
    const recipe = await prisma.recipe.findFirst({
        where: { urunId: urunId, aktif: true },
        include: {
            icerikelek: {
                include: {
                    material: true
                }
            }
        }
    });

    if (!recipe) {
        return [];
    }

    // Sipari≈ü miktarƒ±nƒ± kilogram cinsine √ßevir
    const siparisKg = miktar; // Zaten kg cinsinden geliyor

    return recipe.icerikelek.map(ing => ({
        materialId: ing.material.id,
        materialKodu: ing.material.kod,
        materialAdi: ing.material.ad,
        gerekliMiktar: (ing.gerMiktarTB || ing.gerMiktar || ing.miktar) * siparisKg, // Sipari≈ü miktarƒ±yla √ßarp
        birim: ing.birim
    }));
}

export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ message: 'Method Not Allowed' });
    }

    const { siparisId } = req.body;
    if (!siparisId) {
        return res.status(400).json({ message: 'siparisId gereklidir.' });
    }

    try {
        // Sipari≈üi ve kalemlerini √ßek
        const siparis = await prisma.siparis.findUnique({
            where: { id: parseInt(siparisId) },
            include: {
                kalemler: {
                    include: {
                        urun: true
                    }
                }
            }
        });

        if (!siparis) {
            return res.status(404).json({ message: 'Sipari≈ü bulunamadƒ±.' });
        }

        // Sadece HAZIRLANDI durumundaki sipari≈üler i√ßin stok d√º≈ü√ºlebilir
        if (siparis.durum !== 'HAZIRLANDI') {
            return res.status(400).json({
                message: 'Sadece HAZIRLANDI durumundaki sipari≈üler i√ßin stok d√º≈ü√ºlebilir.'
            });
        }

        // Daha √∂nce stok d√º≈ü√ºm√º yapƒ±lmƒ±≈ü mƒ± kontrol√º
        if (siparis.siparisNotu && siparis.siparisNotu.includes('[STOK D√ú≈û√úLD√ú]')) {
            return res.status(400).json({
                message: 'Bu sipari≈ü i√ßin daha √∂nce stok d√º≈ü√ºm√º yapƒ±lmƒ±≈ü.'
            });
        }

        let stokIhtiyaclari = {};
        const stokHatalari = [];
        const uyarilar = []; // Re√ßetesi olmayan √ºr√ºnler i√ßin uyarƒ± listesi

        // Her kalem i√ßin re√ßete malzemelerini hesapla
        for (const kalem of siparis.kalemler) {
            console.log(`üìã ${kalem.urun.ad} i√ßin re√ßete malzemeleri hesaplanƒ±yor (${kalem.miktar} ${kalem.birim})`);

            const materials = await resolveRecipeMaterials(kalem.urun.id, kalem.miktar);

            if (materials.length === 0) {
                // ‚ö†Ô∏è UYARI: Re√ßete yok ama i≈üleme devam et
                uyarilar.push(`‚ö†Ô∏è '${kalem.urun.ad}' i√ßin aktif re√ßete bulunamadƒ± - stok d√º≈ü√ºm√º yapƒ±lmadƒ±`);
                console.warn(`‚ö†Ô∏è ${kalem.urun.ad} i√ßin re√ßete bulunamadƒ±, stok d√º≈ü√ºm√º atlanƒ±yor`);
                continue;
            }

            for (const material of materials) {
                if (!stokIhtiyaclari[material.materialId]) {
                    stokIhtiyaclari[material.materialId] = {
                        materialId: material.materialId,
                        materialKodu: material.materialKodu,
                        materialAdi: material.materialAdi,
                        gerekliMiktar: 0,
                        birim: material.birim
                    };
                }
                stokIhtiyaclari[material.materialId].gerekliMiktar += material.gerekliMiktar;
            }
        }

        // Stok kontrol√º ve d√º≈ü√ºm√º
        const stokHareketleri = [];

        for (const materialId in stokIhtiyaclari) {
            const ihtiyac = stokIhtiyaclari[materialId];

            // Material'ƒ± bul
            const material = await prisma.material.findUnique({
                where: { id: materialId }
            });

            if (!material) {
                stokHatalari.push(`${ihtiyac.materialKodu} kodlu malzeme bulunamadƒ±`);
                continue;
            }

            // Stok yeterliliƒüi kontrol√º - YETERSƒ∞Z STOKTA DA DEVAM ET AMA UYARI VER
            if (material.mevcutStok < ihtiyac.gerekliMiktar) {
                uyarilar.push(
                    `‚ö†Ô∏è ${material.ad} i√ßin yetersiz stok! Gereken: ${ihtiyac.gerekliMiktar}${ihtiyac.birim}, Mevcut: ${material.mevcutStok}${material.birim} (Negatif stok olu≈üacak)`
                );
                console.warn(`‚ö†Ô∏è ${material.ad} i√ßin yetersiz stok, negatif stok olu≈üacak`);
                // ƒ∞≈üleme devam et, stoku d√º≈ü (negatif olabilir)
            }

            // Stoktan d√º≈ü
            const oncekiStok = material.mevcutStok;
            const sonrakiStok = oncekiStok - ihtiyac.gerekliMiktar;

            await prisma.material.update({
                where: { id: materialId },
                data: { mevcutStok: sonrakiStok }
            });

            // Stok hareketi kaydet
            const stokHareket = await prisma.stokHareket.create({
                data: {
                    materialId: parseInt(materialId),
                    tip: 'CIKIS',
                    miktar: ihtiyac.gerekliMiktar,
                    birim: ihtiyac.birim || material.birim,
                    aciklama: `Sipari≈ü #${siparisId} i√ßin manuel stok d√º≈ü√ºm√º (re√ßete bazƒ±nda)`,
                    oncekiStok: oncekiStok,
                    sonrakiStok: sonrakiStok,
                    toplamMaliyet: (material.birimFiyat || 0) * ihtiyac.gerekliMiktar,
                    birimMaliyet: material.birimFiyat || 0,
                    siparisKalemiId: null // Genel sipari≈ü d√º≈ü√ºm√º
                }
            });

            stokHareketleri.push({
                materialKodu: material.kod,
                materialAdi: material.ad,
                dusulenMiktar: ihtiyac.gerekliMiktar,
                birim: ihtiyac.birim,
                oncekiStok: oncekiStok,
                sonrakiStok: sonrakiStok
            });

            console.log(`‚úÖ Stok d√º≈ü√ºld√º: ${material.ad} | ${oncekiStok} -> ${sonrakiStok} ${material.birim}`);
        }

        // Sadece kritik stok hatalarƒ± varsa i≈ülemi iptal et (yetersiz stok vs.)
        if (stokHatalari.length > 0) {
            return res.status(400).json({
                message: 'Stok d√º≈üme i≈ülemi ba≈üarƒ±sƒ±z:',
                hatalar: stokHatalari
            });
        }

        // Sipari≈ü a√ßƒ±klamasƒ±na i≈üaret ve uyarƒ±larƒ± ekle
        let siparisNotu = (siparis.siparisNotu || '') + ' [STOK D√ú≈û√úLD√ú]';

        if (uyarilar.length > 0) {
            siparisNotu += ` [UYARILAR: ${uyarilar.length} √ºr√ºn re√ßetesi eksik]`;
            console.warn(`‚ö†Ô∏è ${uyarilar.length} √ºr√ºn i√ßin re√ßete bulunamadƒ±:`, uyarilar);
        }

        await prisma.siparis.update({
            where: { id: parseInt(siparisId) },
            data: {
                siparisNotu: siparisNotu
            }
        });

        console.log(`‚úÖ Sipari≈ü ${siparisId} i√ßin stok d√º≈ü√ºm√º tamamlandƒ±. ${stokHareketleri.length} malzeme d√º≈ü√ºld√º.`);

        return res.status(200).json({
            message: 'Stoklar ba≈üarƒ±yla d√º≈ü√ºld√º.',
            hareketler: stokHareketleri,
            uyarilar: uyarilar,
            toplamDusulenMalzeme: stokHareketleri.length,
            toplamUyari: uyarilar.length
        });

    } catch (error) {
        console.error('‚ùå Stok d√º≈ü√ºm√º hatasƒ±:', error);
        return res.status(500).json({
            message: 'Stok d√º≈ü√ºm√º sƒ±rasƒ±nda hata olu≈ütu.',
            error: error.message
        });
    }
} 