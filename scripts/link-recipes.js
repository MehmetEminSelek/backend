const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Manuel e≈üle≈ütirme tablosu
const manualMappings = {
    "BULBUL YUVASI (UR)": ["B√ºlb√ºl Yuvasƒ±", "Cevizli B√ºlb√ºl Yuvasƒ±"],
    "BURMA KADAYIF (UR)": ["Burma Kadayƒ±f"],
    "CEVIZLI BAKLAVA (UR)": ["Cevizli Ya≈ü Baklava"],
    "EZME (UR)": ["Fƒ±stƒ±k Ezmesi", "Kare Fƒ±stƒ±k Ezmesi", "Sargƒ±lƒ± Fƒ±stƒ±k Ezmesi"],
    "FISTIKLI YAS BAKLAVA (UR)": ["Ya≈ü Baklava"],
    "HAVUC DILIMI (UR)": ["Havu√ß Dilimi", "Kaymaklƒ± Havu√ß Dilimi"],
    "SOBIYET (UR)": ["≈û√∂biyet", "Cevizli ≈û√∂biyet", "√ñzel ≈û√∂biyet", "Yaprak ≈û√∂biyet"],
    "OZEL KARE BAKLAVA (UR)": ["√ñzel Kare", "Cevizli √ñzel Kare"]
};

async function linkRecipesToProducts() {
    console.log('üîó Re√ßeteler ve √ºr√ºnler ili≈ükilendiriliyor...\n');

    try {
        // √ñnce mevcut durumu kontrol et
        const totalRecipes = await prisma.recipe.count();
        const linkedRecipes = await prisma.recipe.count({ where: { urunId: { not: null } } });

        console.log(`üìä Mevcut durum:`);
        console.log(`   - Toplam re√ßete: ${totalRecipes}`);
        console.log(`   - √úr√ºne baƒülƒ±: ${linkedRecipes}`);
        console.log(`   - Baƒülanacak: ${totalRecipes - linkedRecipes}\n`);

        // √úr√ºnleri ve re√ßeteleri √ßek
        const urunler = await prisma.urun.findMany({
            select: { id: true, ad: true, kod: true }
        });

        const receteler = await prisma.recipe.findMany({
            where: { urunId: null }, // Sadece baƒülƒ± olmayanlarƒ± al
            select: { id: true, ad: true, kod: true }
        });

        console.log(`üîç ${urunler.length} √ºr√ºn ve ${receteler.length} baƒülanmamƒ±≈ü re√ßete bulundu.\n`);

        let basarili = 0;
        let eslesmeBulunamadi = 0;

        // Her re√ßete i√ßin √ºr√ºn e≈üle≈ütirmesi yap
        for (const recete of receteler) {
            let eslesenUrunler = [];

            // 1. Manuel e≈üle≈ütirme kontrol√º
            if (manualMappings[recete.ad]) {
                const urunAdlari = manualMappings[recete.ad];
                for (const urunAdi of urunAdlari) {
                    const urun = urunler.find(u => u.ad === urunAdi);
                    if (urun) {
                        eslesenUrunler.push(urun);
                    }
                }
            }

            // 2. Otomatik e≈üle≈ütirme (manuel bulunamadƒ±ysa)
            if (eslesenUrunler.length === 0) {
                // ƒ∞sim benzerliƒüi
                const receteAdiClean = recete.ad.replace(' (UR)', '').replace(' (YM)', '').toLowerCase();

                // Tam e≈üle≈üme
                let eslesenUrun = urunler.find(u =>
                    u.ad.toLowerCase() === receteAdiClean
                );

                // Kƒ±smi e≈üle≈üme
                if (!eslesenUrun) {
                    eslesenUrun = urunler.find(u =>
                        u.ad.toLowerCase().includes(receteAdiClean) ||
                        receteAdiClean.includes(u.ad.toLowerCase())
                    );
                }

                if (eslesenUrun) {
                    eslesenUrunler.push(eslesenUrun);
                }
            }

            // E≈üle≈üme bulunduysa ilkini kullan (ileride kullanƒ±cƒ± se√ßebilir)
            if (eslesenUrunler.length > 0) {
                const secilenUrun = eslesenUrunler[0];

                // G√ºncelle
                await prisma.recipe.update({
                    where: { id: recete.id },
                    data: { urunId: secilenUrun.id }
                });

                console.log(`‚úÖ "${recete.ad}" ‚Üí "${secilenUrun.ad}"`);
                if (eslesenUrunler.length > 1) {
                    console.log(`   ‚ÑπÔ∏è  Diƒüer se√ßenekler: ${eslesenUrunler.slice(1).map(u => u.ad).join(', ')}`);
                }
                basarili++;
            } else {
                console.log(`‚ùå "${recete.ad}" i√ßin √ºr√ºn bulunamadƒ±`);
                eslesmeBulunamadi++;
            }
        }

        console.log(`\nüìä ƒ∞li≈ükilendirme √ñzeti:`);
        console.log(`   ‚úÖ Ba≈üarƒ±lƒ±: ${basarili}`);
        console.log(`   ‚ùå E≈üle≈üme bulunamadƒ±: ${eslesmeBulunamadi}`);

        // Son durumu g√∂ster
        const finalLinkedCount = await prisma.recipe.count({ where: { urunId: { not: null } } });
        console.log(`\nüéØ Toplam baƒülƒ± re√ßete sayƒ±sƒ±: ${finalLinkedCount}/${totalRecipes}`);

        // Yarƒ± mamul re√ßeteleri hakkƒ±nda bilgi
        const yariMamulRecipes = await prisma.recipe.count({ where: { ad: { contains: '(YM)' } } });
        if (yariMamulRecipes > 0) {
            console.log(`\n‚ÑπÔ∏è  Not: ${yariMamulRecipes} adet yarƒ± mam√ºl re√ßetesi (YM) √ºr√ºnlerle ili≈ükilendirilmedi.`);
        }

    } catch (error) {
        console.error('‚ùå Hata:', error);
    } finally {
        await prisma.$disconnect();
    }
}

linkRecipesToProducts(); 